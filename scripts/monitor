#!/usr/bin/env python

import rospy
from rosgraph_monitor.monitor_manager import MonitorManager, ServiceWrapper
from rosgraph_monitor.parser import ModelParser
from pyparsing import *
import os.path

from ros_graph_parser.srv import GetROSModel, GetROSSystemModel
from diagnostic_msgs.msg import DiagnosticArray, DiagnosticStatus


class GraphScanService(ServiceWrapper):
    def __init__(self, haros_model):
        super(GraphScanService, self).__init__(
            'get_rossystem_model', GetROSSystemModel)
        self._rossystem_parser = ModelParser(haros_model)

    # This function needs to be implemented by every service wrapper
    # extract diagnostics from response here
    def diagnostics_from_response(self, resp):
        parser = ModelParser(resp.model, isFile=False)
        dynamic_model = parser.parse()
        static_model = self._rossystem_parser.parse()
        print(dynamic_model.dump())
        print(static_model.dump())
        self.compare_with_model(resp)

        status_msg = DiagnosticStatus()
        status_msg.level = DiagnosticStatus.OK
        status_msg.name = "ROS Graph"
        status_msg.message = "alive"

        return status_msg

    # compare with ros model here
    def compare_with_model(self, resp):
        # how to extract the model from the string?
        pass


if __name__ == "__main__":
    rospy.init_node('graph_monitor')
    manager = MonitorManager()

    my_path = os.path.abspath(os.path.dirname(__file__))
    path = os.path.join(my_path, "../resources/robotino.rossystem")

    # how can this be read from a YAML file
    # ideally should have service name and type only
    graph_service = GraphScanService(path)
    manager.register_service(graph_service)

    manager.loop()
    rospy.spin()
